<?xml version="1.0" encoding="UTF-8"?>
<ValidationRule xmlns="http://soap.sforce.com/2006/04/metadata">
    <fullName>Accouont_Phone_Validation</fullName>
    <active>false</active>
    <description>This validation rule for ensure the Correct 10 digit valid phone number</description>
    <errorConditionFormula>AND( 
NOT(ISBLANK(Phone)), 

OR( 
/* This First Part is an If Statement to ensure the number is 10 digits long and logically checks if it has an extension in the format of xdddd or x dddd only 4 digits is possible */ 
IF( 
AND(OR(Contains(Phone, &quot;x&quot;) , Contains(Phone,&quot;x&quot;)),REGEX(RIGHT(Phone,5), &quot;x[0-9]{4}&quot;)), 

NOT(REGEX(Phone, &quot;\\([0-9]{3}\\) [0-9]{3}\\-[0-9]{4} x[0-9]{4}&quot;)), 

IF( 
AND(OR(Contains(Phone, &quot;x&quot;) , Contains(Phone,&quot;x&quot;)),REGEX(RIGHT(Phone,4), &quot;x[0-9]{3}&quot;)), 

NOT(REGEX(Phone, &quot;\\([0-9]{3}\\) [0-9]{3}\\-[0-9]{4} x[0-9]{3}&quot;)), 

IF( 

AND(OR(Contains(Phone, &quot;x&quot;) , Contains(Phone,&quot;x&quot;)),REGEX(RIGHT(Phone,3), &quot;x[0-9]{2}&quot;)), 

NOT(REGEX(Phone, &quot;\\([0-9]{3}\\) [0-9]{3}\\-[0-9]{4} x[0-9]{2}&quot;)), 

IF( 
AND(OR(Contains(Phone, &quot;x&quot;) , Contains(Phone,&quot;x&quot;)),REGEX(RIGHT(Phone,2), &quot;x[0-9]{1}&quot;)), 

NOT(REGEX(Phone, &quot;\\([0-9]{3}\\) [0-9]{3}\\-[0-9]{4} x[0-9]{1}&quot;)), 

IF( 
AND(OR(Contains(Phone, &quot;x&quot;) , Contains(Phone,&quot;x&quot;)),REGEX(RIGHT(Phone,6), &quot;x\\ [0-9]{4}&quot;)), 

NOT(REGEX(Phone, &quot;\\([0-9]{3}\\) [0-9]{3}\\-[0-9]{4} x\\ [0-9]{4}&quot;)), 

IF( 
AND(OR(Contains(Phone, &quot;x&quot;) , Contains(Phone,&quot;x&quot;)),REGEX(RIGHT(Phone,5), &quot;x\\ [0-9]{3}&quot;)), 

NOT(REGEX(Phone, &quot;\\([0-9]{3}\\) [0-9]{3}\\-[0-9]{4} x\\ [0-9]{3}&quot;)), 

IF( 

AND(OR(Contains(Phone, &quot;x&quot;) , Contains(Phone,&quot;x&quot;)),REGEX(RIGHT(Phone,4), &quot;x\\ [0-9]{2}&quot;)), 

NOT(REGEX(Phone, &quot;\\([0-9]{3}\\) [0-9]{3}\\-[0-9]{4} x\\ [0-9]{2}&quot;)), 

IF( 
AND(OR(Contains(Phone, &quot;x&quot;) , Contains(Phone,&quot;x&quot;)),REGEX(RIGHT(Phone,3), &quot;x\\ [0-9]{1}&quot;)), 

NOT(REGEX(Phone, &quot;\\([0-9]{3}\\) [0-9]{3}\\-[0-9]{4} x\\ [0-9]{1}&quot;)), 


IF( 
LEFT(Phone,1)=&quot;(&quot;, 
NOT( REGEX(Phone, &quot;\\([0-9]{3}\\) [0-9]{3}-[0-9]{4}|\\d{10}&quot;)), 
NOT(REGEX(Phone, &quot;\\D*?(\\d\\D*?){10}&quot;)) 


))))))))), 

/* This part is to ensure that the number is not XXXXXXXXXX. NOTE: this does not work with 1111111111 */ 
mid(Phone, 2, 1) + mid(Phone, 2, 1) + mid(Phone, 2, 1) + mid 
(Phone, 2, 1) + mid(Phone, 2, 1) + mid(Phone, 2, 1) + mid(Phone, 2, 1) + mid 
(Phone, 2, 1) + mid(Phone, 2, 1) + mid(Phone, 2, 1) = mid(Phone, 2, 3)+ mid(Phone, 7, 3)+ mid(Phone, 11, 4), 

/* This is to ensure the phone is not 1111111111 */ 
Phone = &quot;1111111111&quot; 


))</errorConditionFormula>
    <errorDisplayField>Phone</errorDisplayField>
    <errorMessage>Please Enter Correct 10 digit valid Phone Number</errorMessage>
</ValidationRule>
